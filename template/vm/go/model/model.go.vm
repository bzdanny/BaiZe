package {{.table.PackageName}}Models
import (
    "baize/app/common/commonModels"
    "github.com/gogf/gf/util/gconv"
{{$containsTimeType:=false}}{{range $index, $column := .table.Columns}}{{if eq $column.IsEntity "0"}}{{if eq $column.GoType "Time"}}{{$containsTimeType = true}}{{end}}{{end}}{{end}}{{if $containsTimeType}}    "baize/app/common/baize/baizeUnix"{{end}}
)

// ==========================================================================
// date：{{.table.GenerateTime.Format "2006-01-02 15:04:05" }}
// author：{{.table.FunctionAuthor}}
// version: v1.0
// ==========================================================================

type {{.table.ClassName}}Vo struct {
{{range $index, $column := .table.Columns}}{{if eq $column.IsEntity "0"}}     {{$column.GoField}}    {{if eq $column.GoType "Time"}}*baizeUnix.BaiZeTime{{else}}{{if ne "1" $column.IsRequired}}{{if ne "1" $column.IsPk}}*{{end}}{{end}}{{$column.GoType}}{{end}}    `json:"{{$column.HtmlField}}{{if eq $column.IsPk "1"}}{{if eq $column.GoType "int64"}},string{{end}}{{end}}" db:"{{$column.ColumnName}}"`    // {{$column.ColumnComment}}{{end}}
{{end}}
    commonModels.BaseEntity
}

type {{.table.ClassName}}DQL struct {
{{range $index, $column := .table.Columns}}{{if ne $column.QueryType "BETWEEN"}}{{if eq $column.IsQuery "1"}}
     {{$column.GoField}}     {{if eq $column.GoType "Time"}}*baizeUnix.BaiZeTime{{else}}{{if ne "string" $column.GoType}}*{{end}}{{$column.GoType}}{{end}}     `form:"{{$column.HtmlField}}{{if eq $column.IsPk "1"}}{{if eq $column.GoType "int64"}},string{{end}}{{end}}" db:"{{$column.ColumnName}}"`     // {{$column.ColumnComment}}{{end}}{{else}}
     {{$column.GoField}}Begin     {{if eq $column.GoType "Time"}}*baizeUnix.BaiZeTime{{else}}{{if ne "string" $column.GoType}}*{{end}}{{$column.GoType}}{{end}}     `form:"{{$column.HtmlField}}Begin{{if eq $column.IsPk "1"}}{{if eq $column.GoType "int64"}},string{{end}}{{end}}" db:"{{$column.ColumnName}}_begin"`     // {{$column.ColumnComment}}开始
     {{$column.GoField}}End     {{if eq $column.GoType "Time"}}*baizeUnix.BaiZeTime{{else}}{{if ne "string" $column.GoType}}*{{end}}{{$column.GoType}}{{end}}     `form:"{{$column.HtmlField}}End{{if eq $column.IsPk "1"}}{{if eq $column.GoType "int64"}},string{{end}}{{end}}" db:"{{$column.ColumnName}}_end"`     // {{$column.ColumnComment}}结束{{end}}{{end}}
     commonModels.BaseEntityDQL
}

type {{.table.ClassName}}DML struct {
{{range $index, $column := .table.Columns}}{{if eq $column.IsEntity "0"}}     {{$column.GoField}}    {{if eq $column.GoType "Time"}}*baizeUnix.BaiZeTime{{else}}{{if ne "string" $column.GoType}}{{if ne "1" $column.IsPk}}*{{end}}{{end}}{{$column.GoType}}{{end}}    `json:"{{$column.HtmlField}}{{if eq $column.IsPk "1"}}{{if eq $column.GoType "int64"}},string{{end}}{{end}}" db:"{{$column.ColumnName}}"`    // {{$column.ColumnComment}}
{{end}}{{end}}
    commonModels.BaseEntityDML
}

func {{.table.ClassName}}ListToRows({{.table.BusinessName}}s []*{{.table.ClassName}}Vo) (rows [][]string) {
	rows = make([][]string, 0, len({{.table.BusinessName}}s)+1)
	row1 := []string{
	{{range $index, $column := .table.Columns}}{{if eq $column.IsList "1"}}"{{$column.ColumnComment}}",
	{{end}}{{end}}}
	rows = append(rows, row1)
	for _, data := range {{.table.BusinessName}}s {
		row := make([]string, 0)
{{range $index, $column := .table.Columns}}{{if eq $column.IsList "1"}}		row=append(row, gconv.String(data.{{$column.GoField}} ))
{{end}}{{end}}
		rows = append(rows, row)
	}
	return
}
